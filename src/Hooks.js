// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Js_primitive from "bs-platform/lib/es6/js_primitive.js";

function useState(initial, hooks, fin) {
  var match = hooks[/* current */1];
  var match$1;
  if (match !== undefined) {
    var match$2 = match;
    match$1 = /* tuple */[
      match$2[1],
      /* record */[
        /* invalidate */hooks[/* invalidate */0],
        /* current */match$2[0]
      ]
    ];
  } else {
    var st = /* record */[
      /* prev */undefined,
      /* current */initial
    ];
    match$1 = /* tuple */[
      st,
      /* record */[
        /* invalidate */hooks[/* invalidate */0],
        /* current */undefined
      ]
    ];
  }
  var hooks$1 = match$1[1];
  var state = match$1[0];
  var match$3 = Curry._2(fin, /* tuple */[
        state[/* current */1],
        (function (v) {
            state[/* prev */0] = Js_primitive.some(state[/* current */1]);
            state[/* current */1] = v;
            return Curry._1(hooks$1[/* invalidate */0], /* () */0);
          })
      ], hooks$1);
  var hooks$2 = match$3[1];
  return /* tuple */[
          match$3[0],
          /* record */[
            /* invalidate */hooks$2[/* invalidate */0],
            /* current *//* tuple */[
              hooks$2[/* current */1],
              state
            ]
          ]
        ];
}

function newEffect(fn, args) {
  return /* record */[
          /* args */args,
          /* prevArgs */undefined,
          /* cleanup */undefined,
          /* fn */fn
        ];
}

function useEffect(fn, args, hooks, fin) {
  var match = hooks[/* current */1];
  if (match !== undefined) {
    var match$1 = match;
    var effect = match$1[1];
    var effect_001 = /* prevArgs */Js_primitive.some(effect[/* args */0]);
    var effect_002 = /* cleanup */effect[/* cleanup */2];
    var effect$1 = /* record */[
      /* args */args,
      effect_001,
      effect_002,
      /* fn */fn
    ];
    var match$2 = Curry._1(fin, /* record */[
          /* invalidate */hooks[/* invalidate */0],
          /* current */match$1[0]
        ]);
    var hooks$1 = match$2[1];
    return /* tuple */[
            match$2[0],
            /* record */[
              /* invalidate */hooks$1[/* invalidate */0],
              /* current *//* tuple */[
                hooks$1[/* current */1],
                effect$1
              ]
            ]
          ];
  } else {
    var effect$2 = newEffect(fn, args);
    var match$3 = Curry._1(fin, /* record */[
          /* invalidate */hooks[/* invalidate */0],
          /* current */undefined
        ]);
    var hooks$2 = match$3[1];
    return /* tuple */[
            match$3[0],
            /* record */[
              /* invalidate */hooks$2[/* invalidate */0],
              /* current *//* tuple */[
                hooks$2[/* current */1],
                effect$2
              ]
            ]
          ];
  }
}

function myComponent(_, _$1, param) {
  console.log("Here");
  var match = useState(10, param[/* hooks */0], (function (_, hooks) {
          return useState("name", hooks, (function (_, hooks) {
                        console.log("Hi");
                        return useEffect((function (_, _$1) {
                                      return /* () */0;
                                    }), /* () */0, hooks, (function (hooks) {
                                      console.log("Ho");
                                      return /* tuple */[
                                              "contents",
                                              hooks
                                            ];
                                    }));
                      }));
        }));
  Curry._1(param[/* finish */1], match[1]);
  return match[0];
}

export {
  useState ,
  newEffect ,
  useEffect ,
  myComponent ,
  
}
/* No side effect */
