// Generated by BUCKLESCRIPT VERSION 4.0.7000, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bsb-native/lib/js/curry.js");
var Layout = require("./Layout.bs.js");
var Caml_obj = require("bsb-native/lib/js/caml_obj.js");
var Belt_List = require("bsb-native/lib/js/belt_List.js");

function F(NativeInterface) {
  var string = function (layout, font, x) {
    return /* `String */[
            -976970511,
            /* tuple */[
              x,
              layout,
              font
            ]
          ];
  };
  var makeComponent = function (identity, render) {
    return /* record */[
            /* init */(function (param) {
                return /* WithState */[/* record */[
                          /* identity */identity,
                          /* render */render,
                          /* hooks : record */[/* contents */undefined],
                          /* invalidated */false,
                          /* reconciler */undefined,
                          /* onChange */(function (param) {
                              return /* () */0;
                            })
                        ]];
              }),
            /* clone */(function (param) {
                var contents = param[0];
                if (contents[/* identity */0] === identity) {
                  if (contents[/* render */1] === render) {
                    return /* Same */925282182;
                  } else {
                    return /* `Compatible */[
                            785637236,
                            /* WithState */[/* record */[
                                /* identity */contents[/* identity */0],
                                /* render */render,
                                /* hooks */contents[/* hooks */2],
                                /* invalidated */contents[/* invalidated */3],
                                /* reconciler */contents[/* reconciler */4],
                                /* onChange */contents[/* onChange */5]
                              ]]
                          ];
                  }
                } else {
                  return /* Different */-890978471;
                }
              })
          ];
  };
  var Maker = /* module */[/* makeComponent */makeComponent];
  var runRender = function (param) {
    var component = param[0];
    var effects = /* record */[/* contents : [] */0];
    var hooks_000 = function (param) {
      component[/* invalidated */3] = true;
      return Curry._1(component[/* onChange */5], /* () */0);
    };
    var hooks_001 = function (oldData, data, reconcile) {
      component[/* reconciler */4] = /* tuple */[
        oldData,
        data,
        reconcile
      ];
      return /* () */0;
    };
    var hooks_002 = function (cleanup, fn, setCleanup) {
      effects[/* contents */0] = /* :: */[
        /* record */[
          /* cleanup */cleanup,
          /* fn */fn,
          /* setCleanup */setCleanup
        ],
        effects[/* contents */0]
      ];
      return /* () */0;
    };
    var hooks_003 = /* current */component[/* hooks */2];
    var hooks = /* record */[
      hooks_000,
      hooks_001,
      hooks_002,
      hooks_003
    ];
    component[/* invalidated */3] = false;
    var tree = Curry._1(component[/* render */1], hooks);
    return /* tuple */[
            tree,
            effects[0]
          ];
  };
  var getNativeNode = function (_tree) {
    while(true) {
      var tree = _tree;
      var variant = tree[0];
      if (variant !== -165956642) {
        if (variant >= 163738996) {
          return tree[1][0];
        } else {
          return tree[1][1];
        }
      } else {
        _tree = tree[1][/* mountedTree */1];
        continue ;
      }
    };
  };
  var getInstanceLayout = function (_element) {
    while(true) {
      var element = _element;
      var variant = element[0];
      if (variant >= 560167418) {
        if (variant >= 1009263472) {
          return element[1];
        } else {
          return element[1][1];
        }
      } else if (variant >= 209368410) {
        return element[1][2];
      } else {
        _element = element[1][1];
        continue ;
      }
    };
  };
  var getMountedLayout = function (_element) {
    while(true) {
      var element = _element;
      var variant = element[0];
      if (variant >= -165956642) {
        if (variant >= 163738996) {
          return element[1][1];
        } else {
          _element = element[1][/* mountedTree */1];
          continue ;
        }
      } else if (variant >= -247169578) {
        return element[1][3];
      } else {
        return element[1][2];
      }
    };
  };
  var instantiateTree = function (el) {
    if (typeof el === "number") {
      return /* `INull */[
              1009263472,
              Layout.createNode(/* array */[], Layout.style(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* () */0))
            ];
    } else {
      var variant = el[0];
      if (variant !== -198771759) {
        if (variant >= 1024993923) {
          var match = el[1];
          var measure = match[3];
          var layout = match[2];
          var ichildren = Belt_List.map(match[1], instantiateTree);
          var childLayouts = Belt_List.toArray(Belt_List.map(ichildren, getInstanceLayout));
          var style = layout !== undefined ? layout : Layout.style(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* () */0);
          return /* `IBuiltin */[
                  209368410,
                  /* tuple */[
                    match[0],
                    ichildren,
                    measure !== undefined ? Layout.createNodeWithMeasure(childLayouts, style, measure) : Layout.createNode(childLayouts, style)
                  ]
                ];
        } else {
          var match$1 = el[1];
          var font = match$1[2];
          var layout$1 = match$1[1];
          var contents = match$1[0];
          return /* `IString */[
                  560167418,
                  /* tuple */[
                    contents,
                    Layout.createNodeWithMeasure(/* array */[], layout$1 !== undefined ? layout$1 : Layout.style(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* () */0), Curry._2(NativeInterface[/* measureText */2], contents, font)),
                    font
                  ]
                ];
        }
      } else {
        var custom = Curry._1(el[1][/* init */0], /* () */0);
        var match$2 = runRender(custom);
        return /* `ICustom */[
                -809117478,
                /* tuple */[
                  custom,
                  instantiateTree(match$2[0]),
                  match$2[1]
                ]
              ];
      }
    }
  };
  var runEffect = function (param) {
    var cleanup = param[/* cleanup */0];
    if (cleanup !== undefined) {
      Curry._1(cleanup, /* () */0);
    }
    return Curry._1(param[/* setCleanup */2], Curry._1(param[/* fn */1], /* () */0));
  };
  var inflateTree = function (el) {
    var variant = el[0];
    if (variant >= 560167418) {
      if (variant >= 1009263472) {
        return /* `MNull */[
                163738996,
                /* tuple */[
                  Curry._1(NativeInterface[/* createNullNode */3], /* () */0),
                  el[1]
                ]
              ];
      } else {
        var match = el[1];
        var font = match[2];
        var layout = match[1];
        var contents = match[0];
        return /* `MString */[
                -944155394,
                /* tuple */[
                  contents,
                  Curry._3(NativeInterface[/* createTextNode */4], contents, layout, font),
                  layout,
                  font
                ]
              ];
      }
    } else if (variant >= 209368410) {
      var match$1 = el[1];
      var layout$1 = match$1[2];
      var nativeElement = match$1[0];
      var node = Curry._2(NativeInterface[/* inflate */1], nativeElement, layout$1);
      var children = Belt_List.map(match$1[1], inflateTree);
      Belt_List.forEach(Belt_List.map(children, getNativeNode), (function (childNode) {
              return Curry._2(NativeInterface[/* appendChild */6], node, childNode);
            }));
      return /* `MBuiltin */[
              -247169578,
              /* tuple */[
                nativeElement,
                node,
                children,
                layout$1
              ]
            ];
    } else {
      var match$2 = el[1];
      var custom = match$2[0];
      var mountedTree = inflateTree(match$2[1]);
      var container = /* record */[
        /* custom */custom,
        /* mountedTree */mountedTree
      ];
      listenForChanges(custom, container);
      Belt_List.forEach(match$2[2], runEffect);
      return /* `MCustom */[
              -165956642,
              container
            ];
    }
  };
  var listenForChanges = function (component, container) {
    var contents = component[0];
    contents[/* onChange */5] = (function (param) {
        var match = runRender(component);
        var newElement = match[0];
        var match$1 = contents[/* reconciler */4];
        var tmp;
        if (match$1 !== undefined) {
          var match$2 = match$1;
          tmp = Curry._4(match$2[2], match$2[0], match$2[1], container[/* mountedTree */1], newElement);
        } else {
          tmp = reconcileTrees(container[/* mountedTree */1], newElement);
        }
        container[/* mountedTree */1] = tmp;
        return Belt_List.forEach(match[1], runEffect);
      });
    return /* () */0;
  };
  var reconcileTrees = function (prev, next) {
    var exit = 0;
    if (typeof prev === "number") {
      exit = 1;
    } else {
      var variant = prev[0];
      if (variant !== -944155394) {
        if (variant !== -247169578) {
          if (variant !== -165956642 || typeof next === "number" || next[0] !== -198771759) {
            exit = 1;
          } else {
            var a = prev[1];
            var match = Curry._1(next[1][/* clone */1], a[/* custom */0]);
            if (typeof match === "number") {
              if (match >= 925282182) {
                return /* `MCustom */[
                        -165956642,
                        a
                      ];
              } else {
                var instances = instantiateTree(next);
                var instanceLayout = getInstanceLayout(instances);
                Layout.layout(instanceLayout);
                var tree = inflateTree(instances);
                Curry._2(NativeInterface[/* replaceWith */8], getNativeNode(prev), getNativeNode(tree));
                return tree;
              }
            } else {
              var custom = match[1];
              var match$1 = runRender(custom);
              var tree$1 = reconcileTrees(a[/* mountedTree */1], match$1[0]);
              a[/* custom */0] = custom;
              a[/* mountedTree */1] = tree$1;
              Belt_List.forEach(match$1[1], runEffect);
              return /* `MCustom */[
                      -165956642,
                      a
                    ];
            }
          }
        } else if (typeof next === "number" || next[0] !== 1024993923) {
          exit = 1;
        } else {
          var match$2 = next[1];
          var bLayoutStyle = match$2[2];
          var bElement = match$2[0];
          var match$3 = prev[1];
          var aLayout = match$3[3];
          var node = match$3[1];
          if (Curry._3(NativeInterface[/* maybeUpdate */0], match$3[0], node, bElement)) {
            aLayout[/* style */1] = bLayoutStyle !== undefined ? bLayoutStyle : Layout.style(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* () */0);
            return /* `MBuiltin */[
                    -247169578,
                    /* tuple */[
                      bElement,
                      node,
                      reconcileChildren(node, match$3[2], match$2[1]),
                      aLayout
                    ]
                  ];
          } else {
            var instances$1 = instantiateTree(next);
            var instanceLayout$1 = getInstanceLayout(instances$1);
            Layout.layout(instanceLayout$1);
            var tree$2 = inflateTree(instances$1);
            Curry._2(NativeInterface[/* replaceWith */8], getNativeNode(prev), getNativeNode(tree$2));
            return tree$2;
          }
        }
      } else if (typeof next === "number" || next[0] !== -976970511) {
        exit = 1;
      } else {
        var match$4 = next[1];
        var bfont = match$4[2];
        var blayout = match$4[1];
        var b = match$4[0];
        var match$5 = prev[1];
        var font = match$5[3];
        var layoutNode = match$5[2];
        var node$1 = match$5[1];
        var a$1 = match$5[0];
        if (a$1 === b && Caml_obj.caml_equal(font, bfont)) {
          layoutNode[/* style */1] = blayout !== undefined ? blayout : Layout.style(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* () */0);
          return /* `MString */[
                  -944155394,
                  /* tuple */[
                    a$1,
                    node$1,
                    layoutNode,
                    font
                  ]
                ];
        } else {
          Curry._3(NativeInterface[/* setTextContent */5], node$1, b, bfont);
          Curry._1(Layout.Layout[/* LayoutSupport */0][/* markDirty */48], layoutNode);
          return /* `MString */[
                  -944155394,
                  /* tuple */[
                    b,
                    node$1,
                    layoutNode,
                    bfont
                  ]
                ];
        }
      }
    }
    if (exit === 1) {
      var instances$2 = instantiateTree(next);
      var instanceLayout$2 = getInstanceLayout(instances$2);
      Layout.layout(instanceLayout$2);
      var tree$3 = inflateTree(instances$2);
      Curry._2(NativeInterface[/* replaceWith */8], getNativeNode(prev), getNativeNode(tree$3));
      return tree$3;
    }
    
  };
  var reconcileChildren = function (parentNode, aChildren, bChildren) {
    if (aChildren) {
      if (bChildren) {
        return /* :: */[
                reconcileTrees(aChildren[0], bChildren[0]),
                reconcileChildren(parentNode, aChildren[1], bChildren[1])
              ];
      } else {
        Belt_List.forEach(aChildren, (function (child) {
                return Curry._2(NativeInterface[/* removeChild */7], parentNode, getNativeNode(child));
              }));
        return /* [] */0;
      }
    } else if (bChildren) {
      var more = Belt_List.map(bChildren, (function (child) {
              return inflateTree(instantiateTree(child));
            }));
      Belt_List.forEach(more, (function (child) {
              return Curry._2(NativeInterface[/* appendChild */6], parentNode, getNativeNode(child));
            }));
      return more;
    } else {
      return /* [] */0;
    }
  };
  var mount = function (el, node) {
    var instances = instantiateTree(el);
    var instanceLayout = getInstanceLayout(instances);
    Layout.layout(instanceLayout);
    var tree = inflateTree(instances);
    return Curry._2(NativeInterface[/* appendChild */6], node, getNativeNode(tree));
  };
  var useReconciler = function (data, fn, hooks) {
    var match = hooks[/* current */3][0];
    var next;
    if (match !== undefined) {
      var match$1 = match;
      Curry._3(hooks[/* setReconciler */1], match$1[0], data, fn);
      next = match$1[1];
    } else {
      next = /* record */[/* contents */undefined];
    }
    hooks[/* current */3][0] = /* tuple */[
      data,
      next
    ];
    return /* tuple */[
            /* () */0,
            hooks
          ];
  };
  var useRef = function (initial, hooks) {
    var match = hooks[/* current */3][0];
    if (match !== undefined) {
      var match$1 = match;
      return /* tuple */[
              match$1[0],
              /* record */[
                /* invalidate */hooks[/* invalidate */0],
                /* setReconciler */hooks[/* setReconciler */1],
                /* triggerEffect */hooks[/* triggerEffect */2],
                /* current */match$1[1]
              ]
            ];
    } else {
      var r = /* record */[/* contents */initial];
      var next = /* record */[/* contents */undefined];
      hooks[/* current */3][0] = /* tuple */[
        r,
        next
      ];
      return /* tuple */[
              r,
              /* record */[
                /* invalidate */hooks[/* invalidate */0],
                /* setReconciler */hooks[/* setReconciler */1],
                /* triggerEffect */hooks[/* triggerEffect */2],
                /* current */next
              ]
            ];
    }
  };
  var useState = function (initial, hooks) {
    var match = hooks[/* current */3][0];
    var match$1;
    if (match !== undefined) {
      var match$2 = match;
      match$1 = /* tuple */[
        match$2[0],
        match$2[1]
      ];
    } else {
      var next = /* record */[/* contents */undefined];
      hooks[/* current */3][0] = /* tuple */[
        initial,
        next
      ];
      match$1 = /* tuple */[
        initial,
        next
      ];
    }
    var next$1 = match$1[1];
    return /* tuple */[
            /* tuple */[
              match$1[0],
              (function (v) {
                  hooks[/* current */3][0] = /* tuple */[
                    v,
                    next$1
                  ];
                  return Curry._1(hooks[/* invalidate */0], /* () */0);
                })
            ],
            /* record */[
              /* invalidate */hooks[/* invalidate */0],
              /* setReconciler */hooks[/* setReconciler */1],
              /* triggerEffect */hooks[/* triggerEffect */2],
              /* current */next$1
            ]
          ];
  };
  var useReducer = function (initial, reducer, hooks) {
    var match = useState(initial, hooks);
    var match$1 = match[0];
    var setState = match$1[1];
    var state = match$1[0];
    return /* tuple */[
            /* tuple */[
              state,
              (function (action) {
                  return Curry._1(setState, Curry._2(reducer, state, action));
                })
            ],
            match[1]
          ];
  };
  var newEffect = function (fn, args) {
    return /* record */[
            /* args */args,
            /* cleanup : record */[/* contents */undefined],
            /* fn */fn
          ];
  };
  var useEffect = function (fn, args, hooks) {
    var match = hooks[/* current */3][0];
    var match$1;
    if (match !== undefined) {
      var match$2 = match;
      var effect = match$2[0];
      var effect$1 = Caml_obj.caml_notequal(effect[/* args */0], args) ? (Curry._3(hooks[/* triggerEffect */2], effect[/* cleanup */1][/* contents */0], fn, (function (v) {
                  effect[/* cleanup */1][/* contents */0] = v;
                  return /* () */0;
                })), /* record */[
            /* args */args,
            /* cleanup */effect[/* cleanup */1],
            /* fn */fn
          ]) : effect;
      match$1 = /* tuple */[
        effect$1,
        match$2[1]
      ];
    } else {
      var effect$2 = newEffect(fn, args);
      Curry._3(hooks[/* triggerEffect */2], effect$2[/* cleanup */1][/* contents */0], fn, (function (v) {
              effect$2[/* cleanup */1][/* contents */0] = v;
              return /* () */0;
            }));
      match$1 = /* tuple */[
        effect$2,
        /* record */[/* contents */undefined]
      ];
    }
    var next = match$1[1];
    hooks[/* current */3][0] = /* tuple */[
      match$1[0],
      next
    ];
    return /* tuple */[
            /* () */0,
            /* record */[
              /* invalidate */hooks[/* invalidate */0],
              /* setReconciler */hooks[/* setReconciler */1],
              /* triggerEffect */hooks[/* triggerEffect */2],
              /* current */next
            ]
          ];
  };
  var useMemo = function (fn, args, hooks) {
    var match = hooks[/* current */3][0];
    var match$1;
    if (match !== undefined) {
      var match$2 = match;
      var match$3 = match$2[0];
      var match$4 = Caml_obj.caml_equal(match$3[1], args);
      var value = match$4 ? match$3[0] : Curry._1(fn, /* () */0);
      match$1 = /* tuple */[
        value,
        match$2[1]
      ];
    } else {
      match$1 = /* tuple */[
        Curry._1(fn, /* () */0),
        /* record */[/* contents */undefined]
      ];
    }
    var next = match$1[1];
    var value$1 = match$1[0];
    hooks[/* current */3][0] = /* tuple */[
      /* tuple */[
        value$1,
        args
      ],
      next
    ];
    return /* tuple */[
            value$1,
            /* record */[
              /* invalidate */hooks[/* invalidate */0],
              /* setReconciler */hooks[/* setReconciler */1],
              /* triggerEffect */hooks[/* triggerEffect */2],
              /* current */next
            ]
          ];
  };
  var useCallback = function (fn, args, hooks) {
    return useMemo((function (param) {
                  return fn;
                }), args, hooks);
  };
  var Hooks = /* module */[
    /* useReconciler */useReconciler,
    /* useRef */useRef,
    /* useState */useState,
    /* useReducer */useReducer,
    /* newEffect */newEffect,
    /* useEffect */useEffect,
    /* useMemo */useMemo,
    /* useCallback */useCallback
  ];
  return /* module */[
          /* string */string,
          /* Maker */Maker,
          /* runRender */runRender,
          /* getNativeNode */getNativeNode,
          /* getInstanceLayout */getInstanceLayout,
          /* getMountedLayout */getMountedLayout,
          /* instantiateTree */instantiateTree,
          /* runEffect */runEffect,
          /* inflateTree */inflateTree,
          /* listenForChanges */listenForChanges,
          /* reconcileTrees */reconcileTrees,
          /* reconcileChildren */reconcileChildren,
          /* mount */mount,
          /* Hooks */Hooks
        ];
}

exports.F = F;
/* Layout Not a pure module */
