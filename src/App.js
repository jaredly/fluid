// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Hooks from "./Hooks.js";
import * as Printf from "bs-platform/lib/es6/printf.js";
import * as Spring from "./Spring.js";
import * as Animate from "./Animate.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as FluidDom from "./FluidDom.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Js_primitive from "bs-platform/lib/es6/js_primitive.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";

var Style = /* module */[];

function translate(node, dx, offset) {
  return Animate.spring(1, 10, undefined, (function (amount) {
                node.style.transform = "translateX(" + (Pervasives.string_of_float((1 - amount) * dx + offset) + "px)");
                return /* () */0;
              }), (function () {
                return /* () */0;
              }));
}

var abs = (
function(node) {
  const box = node.getBoundingClientRect();
  node.style.position = 'absolute';
  node.style.pointerEvents = 'none';
  node.style.top = box.top + 'px';
  node.style.left = box.left + 'px';
}
);

function fade(node, out) {
  if (out) {
    Curry._1(abs, node);
  }
  return Animate.spring(1, 10, undefined, (function (amount) {
                node.style.opacity = out ? amount : 1 - amount;
                return /* () */0;
              }), (function () {
                if (out) {
                  node.parentNode.removeChild(node);
                  return /* () */0;
                } else {
                  return 0;
                }
              }));
}

function toggle(on, off, ctx) {
  var match = Hooks.useState(false, ctx[/* hooks */0], (function (param, __hooks) {
          var setOn = param[1];
          var isOn = param[0];
          return Hooks.useReconciler(isOn, (function (oldState, newState, mountedTree, newTree) {
                        console.log("reconciling I guess", oldState, newState);
                        var exit = 0;
                        if (oldState) {
                          if (newState) {
                            return mountedTree;
                          } else {
                            exit = 1;
                          }
                        } else if (newState) {
                          exit = 1;
                        } else {
                          return mountedTree;
                        }
                        if (exit === 1) {
                          var nativeNode = Curry._1(FluidDom.Fluid[/* getNativeNode */3], mountedTree);
                          var newTree$1 = Curry._1(FluidDom.Fluid[/* inflateTree */6], Curry._1(FluidDom.Fluid[/* instantiateTree */4], newTree));
                          var newNativeNode = Curry._1(FluidDom.Fluid[/* getNativeNode */3], newTree$1);
                          translate(nativeNode, newState ? -30 : 30, 0);
                          fade(nativeNode, true);
                          translate(newNativeNode, newState ? -30 : 30, newState ? 30 : -30);
                          fade(newNativeNode, false);
                          nativeNode.parentNode.insertBefore(newNativeNode, nativeNode);
                          return newTree$1;
                        }
                        
                      }), __hooks, (function (_, __hooks) {
                        return /* tuple */[
                                (console.log("Is On", isOn), isOn ? Curry._1(on, (function () {
                                            return Curry._1(setOn, false);
                                          })) : Curry._1(off, (function () {
                                            return Curry._1(setOn, true);
                                          }))),
                                __hooks
                              ];
                      }));
        }));
  Curry._1(ctx[/* finish */1], match[1]);
  return match[0];
}

function awesomeComponent(value, toString, ctx) {
  var match = Hooks.useState("Awesome", ctx[/* hooks */0], (function (param, __hooks) {
          var setState = param[1];
          var state = param[0];
          return /* tuple */[
                  /* Builtin */Block.__(1, [
                      Curry._7(FluidDom.Fluid[/* Native */11][/* div */0], undefined, undefined, undefined, undefined, undefined, undefined, /* () */0),
                      /* :: */[
                        /* Builtin */Block.__(1, [
                            Curry._7(FluidDom.Fluid[/* Native */11][/* div */0], undefined, undefined, undefined, undefined, (function () {
                                    return Curry._1(setState, state + "1");
                                  }), undefined, /* () */0),
                            /* :: */[
                              /* String */Block.__(0, ["Folkx " + (Curry._1(toString, value) + (" " + state))]),
                              /* [] */0
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]),
                  __hooks
                ];
        }));
  Curry._1(ctx[/* finish */1], match[1]);
  return match[0];
}

function button(text, style, onClick, _) {
  return /* Builtin */Block.__(1, [
            Curry._7(FluidDom.Fluid[/* Native */11][/* button */1], undefined, undefined, undefined, undefined, (function () {
                    return Curry._1(onClick, /* () */0);
                  }), style, /* () */0),
            /* :: */[
              /* String */Block.__(0, [text]),
              /* [] */0
            ]
          ]);
}

var canvas = Curry._2(FluidDom.Fluid[/* NativeInterface */0][/* createElement */1], "canvas", {
      width: 500,
      height: 200
    });

document.body.appendChild(canvas);

var canvas2 = Curry._2(FluidDom.Fluid[/* NativeInterface */0][/* createElement */1], "canvas", {
      width: 500,
      height: 500
    });

document.body.appendChild(canvas2);

var log = Curry._2(FluidDom.Fluid[/* NativeInterface */0][/* createElement */1], "div", { });

document.body.appendChild(log);

var plot = (
function (x, y, scale, color) {
  const ctx = canvas.getContext('2d');
  ctx.fillStyle = color
  ctx.fillRect(x, y, scale, scale)
}
);

var visualize = (
  function (canvas, state, advance, isAtRest) {
    canvas.width = 500
    canvas.height = 500
    const ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, 500, 500);
    ctx.strokeStyle = 'black'
    ctx.lineWidth = 3;
    ctx.beginPath();
    ctx.moveTo(0, 350);
    ctx.stroke()
    for (var i=0; i<500; i++) {
      if (isAtRest(state)) {
        break
      }
      state = advance(16, state);
      ctx.lineTo(i, 250 + state[2] * 100)
    }
    ctx.stroke();
  }
);

function howLong(stiffness, damping) {
  var config = /* record */[
    /* damping */damping,
    /* stiffness */stiffness,
    /* restDisplacementThreshold */0.001,
    /* restVelocityThreshold */0.001
  ];
  var state = Spring.init(0, config);
  var _didOvershoot = false;
  var _state = state;
  var _t = 0;
  while(true) {
    var t = _t;
    var state$1 = _state;
    var didOvershoot = _didOvershoot;
    if (t > 1500) {
      return /* tuple */[
              undefined,
              0
            ];
    } else if (Spring.isAtRest(state$1)) {
      return /* tuple */[
              didOvershoot,
              t
            ];
    } else {
      _t = t + 1 | 0;
      _state = Spring.advance(16, state$1);
      _didOvershoot = didOvershoot || state$1[/* currentValue */2] < 0;
      continue ;
    }
  };
}

function showPlot(stiffness, damping) {
  var config = /* record */[
    /* damping */damping,
    /* stiffness */stiffness,
    /* restDisplacementThreshold */0.001,
    /* restVelocityThreshold */0.001
  ];
  var state = Spring.init(0, config);
  return Curry._4(visualize, canvas2, state, Spring.advance, Spring.isAtRest);
}

var changes = /* array */[];

document.body.awesome = changes;

function sd(x, y) {
  return /* tuple */[
          x / 2 / 1,
          1 + Math.sqrt(y) / 2 / 1
        ];
}

function showLine(x) {
  var last = true;
  for(var y = 0; y <= 200; ++y){
    var x$1 = (x << 0);
    var y$1 = (y << 0);
    var match = sd(x$1, y$1);
    var damping = match[1];
    var stiffness = match[0];
    var match$1 = howLong(stiffness, damping);
    var t = match$1[1];
    var overshoot = match$1[0];
    if (Caml_obj.caml_equal(overshoot, false) && Caml_obj.caml_equal(last, true)) {
      console.log("Change!", /* tuple */[
            overshoot,
            last
          ], stiffness, damping);
      changes.push(/* tuple */[
            stiffness,
            damping
          ]);
    }
    last = overshoot;
    Curry._4(plot, x$1, y$1, 1, overshoot !== undefined ? (
            overshoot ? "rgba(255, 0, 0, " + (Pervasives.string_of_float(t / 2000 + 0.5) + ")") : "rgba(0, 255, 0, " + (Pervasives.string_of_float(t / 2000 + 0.5) + ")")
          ) : "black");
  }
  return /* () */0;
}

function loop(x) {
  showLine(x);
  if (x < 500) {
    requestAnimationFrame((function () {
            return loop(x + 1 | 0);
          }));
    return /* () */0;
  } else {
    return 0;
  }
}

var f = (
  function(){
    const ctx = canvas.getContext('2d')
    ctx.beginPath()
    ctx.moveTo(0,0)
    for (let x = 0; x < 500; x++) {
      ctx.lineTo(x, Math.sqrt(2) * Math.sqrt(x / 2) * 5)
    }
    ctx.strokeStyle = 'black'
    ctx.lineWidth = 1
    ctx.stroke()
  }
);

Curry._1(f, /* () */0);

canvas.addEventListener("mousemove", (function (evt) {
        var box = evt.target.getBoundingClientRect();
        var x = evt.clientX - box.left;
        var y = evt.clientY - box.top;
        var match = sd(x, y);
        var damping = match[1];
        var stiffness = match[0];
        showPlot(stiffness, damping);
        var match$1 = howLong(stiffness, damping);
        log.textContent = Curry._3(Printf.sprintf(/* Format */[
                  /* Float */Block.__(8, [
                      /* Float_f */0,
                      /* No_padding */0,
                      /* No_precision */0,
                      /* String_literal */Block.__(11, [
                          " stiffness ",
                          /* Float */Block.__(8, [
                              /* Float_f */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* String_literal */Block.__(11, [
                                  " damping; ",
                                  /* Int */Block.__(4, [
                                      /* Int_d */0,
                                      /* No_padding */0,
                                      /* No_precision */0,
                                      /* String_literal */Block.__(11, [
                                          " steps",
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ])
                        ])
                    ]),
                  "%f stiffness %f damping; %d steps"
                ]), x / 2, y / 5, match$1[1]);
        return /* () */0;
      }));

var first_000 = Curry._7(FluidDom.Fluid[/* Native */11][/* div */0], "awesome", undefined, undefined, undefined, undefined, "padding: 20px", /* () */0);

var first_001 = /* :: */[
  /* String */Block.__(0, ["Hello"]),
  /* :: */[
    /* Builtin */Block.__(1, [
        Curry._8(FluidDom.Fluid[/* Native */11][/* input */2], undefined, "range", undefined, undefined, undefined, (function (evt) {
                var v = evt.target.value;
                console.log(v);
                var config = /* record */[
                  /* damping */v,
                  /* stiffness */100,
                  /* restDisplacementThreshold */0.001,
                  /* restVelocityThreshold */0.001
                ];
                var state = Spring.init(0, config);
                return Curry._4(visualize, canvas2, state, Spring.advance, Spring.isAtRest);
              }), undefined, /* () */0),
        /* [] */0
      ]),
    /* :: */[
      /* Builtin */Block.__(1, [
          Curry._7(FluidDom.Fluid[/* Native */11][/* div */0], "here", undefined, undefined, undefined, undefined, undefined, /* () */0),
          /* :: */[
            /* Builtin */Block.__(1, [
                Curry._7(FluidDom.Fluid[/* Native */11][/* div */0], undefined, undefined, undefined, undefined, undefined, undefined, /* () */0),
                /* :: */[
                  /* String */Block.__(0, ["What"]),
                  /* [] */0
                ]
              ]),
            /* [] */0
          ]
        ]),
      /* :: */[
        /* Custom */Block.__(2, [Curry._2(FluidDom.Fluid[/* Maker */1][/* makeComponent */0], toggle, (function (param) {
                    return toggle((function (onClick) {
                                  return /* Builtin */Block.__(1, [
                                            Curry._7(FluidDom.Fluid[/* Native */11][/* div */0], undefined, undefined, undefined, undefined, undefined, undefined, /* () */0),
                                            /* :: */[
                                              /* String */Block.__(0, ["Click this to"]),
                                              /* :: */[
                                                /* Custom */Block.__(2, [Curry._2(FluidDom.Fluid[/* Maker */1][/* makeComponent */0], button, (function (param) {
                                                            return button("Turn Off", "background-color: #88ff88", onClick, param);
                                                          }))]),
                                                /* [] */0
                                              ]
                                            ]
                                          ]);
                                }), (function (onClick) {
                                  return /* Builtin */Block.__(1, [
                                            Curry._7(FluidDom.Fluid[/* Native */11][/* div */0], undefined, undefined, undefined, undefined, undefined, undefined, /* () */0),
                                            /* :: */[
                                              /* Custom */Block.__(2, [Curry._2(FluidDom.Fluid[/* Maker */1][/* makeComponent */0], button, (function (param) {
                                                          return button("Turn On", "background-color: #ffacf0", onClick, param);
                                                        }))]),
                                              /* :: */[
                                                /* String */Block.__(0, ["if you want"]),
                                                /* [] */0
                                              ]
                                            ]
                                          ]);
                                }), param);
                  }))]),
        /* :: */[
          /* Custom */Block.__(2, [Curry._2(FluidDom.Fluid[/* Maker */1][/* makeComponent */0], awesomeComponent, (function (param) {
                      return awesomeComponent(5, (function (prim) {
                                    return String(prim);
                                  }), param);
                    }))]),
          /* :: */[
            /* Custom */Block.__(2, [Curry._2(FluidDom.Fluid[/* Maker */1][/* makeComponent */0], awesomeComponent, (function (param) {
                        return awesomeComponent("Hi", (function (x) {
                                      return x;
                                    }), param);
                      }))]),
            /* :: */[
              /* Builtin */Block.__(1, [
                  Curry._7(FluidDom.Fluid[/* Native */11][/* div */0], "Inner", undefined, undefined, undefined, undefined, undefined, /* () */0),
                  /* :: */[
                    /* String */Block.__(0, ["world"]),
                    /* [] */0
                  ]
                ]),
              /* [] */0
            ]
          ]
        ]
      ]
    ]
  ]
];

var first = /* Builtin */Block.__(1, [
    first_000,
    first_001
  ]);

var match = document.getElementById("root");

if (match !== undefined) {
  Curry._2(FluidDom.Fluid[/* mount */10], first, Js_primitive.valFromOption(match));
} else {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "App.re",
          338,
          12
        ]
      ];
}

var scale = 1;

var zoom = 1;

export {
  Style ,
  translate ,
  abs ,
  fade ,
  toggle ,
  awesomeComponent ,
  button ,
  canvas ,
  canvas2 ,
  log ,
  plot ,
  visualize ,
  howLong ,
  showPlot ,
  scale ,
  zoom ,
  changes ,
  sd ,
  showLine ,
  loop ,
  f ,
  first ,
  
}
/* abs Not a pure module */
