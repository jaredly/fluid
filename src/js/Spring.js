// Generated by BUCKLESCRIPT VERSION 4.0.7000, PLEASE EDIT WITH CARE
'use strict';


function niceConfig(dampingRatio, frequencyResponse) {
  var w = 1 / frequencyResponse;
  var dampingFactor = Math.sqrt(2) / 2 * dampingRatio;
  var denom = 1 - 2 * dampingFactor * dampingFactor;
  var stiffness = w * w / denom;
  var damping = dampingFactor * 2 * Math.sqrt(stiffness);
  console.log(dampingFactor, denom, stiffness, damping);
  return /* record */[
          /* damping */damping,
          /* stiffness */stiffness,
          /* restDisplacementThreshold */0.0001,
          /* restVelocityThreshold */0.0001
        ];
}

function perfectDamp(stiffness) {
  return stiffness * 4;
}

function init($staropt$star, config) {
  var initialVelocity = $staropt$star !== undefined ? $staropt$star : 0;
  return /* record */[
          /* config */config,
          /* velocity */initialVelocity,
          /* currentValue */1,
          /* currentTime */0
        ];
}

function isAtRest(param) {
  var match = param[/* config */0];
  if (Math.abs(param[/* currentValue */2]) < match[/* restDisplacementThreshold */2]) {
    return Math.abs(param[/* velocity */1]) < match[/* restVelocityThreshold */3];
  } else {
    return false;
  }
}

function advance(timeDelta, state) {
  var currentValue = state[/* currentValue */2];
  var velocity = state[/* velocity */1];
  var match = state[/* config */0];
  var timeDelta$1 = timeDelta / 1000;
  var acc = -match[/* stiffness */1] * currentValue + -match[/* damping */0] * velocity * timeDelta$1;
  var velocity$1 = velocity + acc * timeDelta$1;
  var currentValue$1 = currentValue + velocity$1 * timeDelta$1;
  return /* record */[
          /* config */state[/* config */0],
          /* velocity */velocity$1,
          /* currentValue */currentValue$1,
          /* currentTime */state[/* currentTime */3]
        ];
}

exports.niceConfig = niceConfig;
exports.perfectDamp = perfectDamp;
exports.init = init;
exports.isAtRest = isAtRest;
exports.advance = advance;
/* No side effect */
