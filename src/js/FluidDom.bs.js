// Generated by BUCKLESCRIPT VERSION 4.0.7000, PLEASE EDIT WITH CARE
'use strict';

var FluidMaker = require("../FluidMaker.bs.js");
var Pervasives = require("bsb-native/lib/js/pervasives.js");
var Js_primitive = require("bsb-native/lib/js/js_primitive.js");

var setDomProps = function (node,props){
    Object.keys(props).forEach(key => {
      if (key === 'checked' || key === 'value') {
        node[key] = props[key]
      } else if (typeof props[key] === 'function') {
        node[key] = props[key]
      } else {
        node.setAttribute(key, props[key])
      }
    })
  };

function string_of_float(f) {
  if ((f | 0) === f) {
    return Pervasives.string_of_float(f) + "0";
  } else {
    return Pervasives.string_of_float(f);
  }
}

function createElement(typ, nativeProps, layout) {
  var node = document.createElement(typ);
  setDomProps(node, nativeProps);
  node.style.position = "absolute";
  node.style.left = string_of_float(layout[/* layout */2][/* left */0]) + "px";
  node.style.top = string_of_float(layout[/* layout */2][/* top */1]) + "px";
  node.style.bottom = string_of_float(layout[/* layout */2][/* bottom */3]) + "px";
  node.style.right = string_of_float(layout[/* layout */2][/* right */2]) + "px";
  node.style.width = string_of_float(layout[/* layout */2][/* width */4]) + "px";
  node.style.height = string_of_float(layout[/* layout */2][/* height */5]) + "px";
  return node;
}

var defaultFont = /* record */[
  /* fontName */"system-ui",
  /* fontSize */16
];

var measureWithCanvas = (
  function() {
    var canvas = document.createElement('canvas');
    var context = canvas.getContext('2d');
    var cache = {};
    document.body.appendChild(canvas);
    return function (text, font) {
      const key = `${text}:${font[0]}:${font[1]}`;
      if (cache[key]) {
        return cache[key]
      }
      context.font = font[1] + 'px ' + font[0]
      const dims = context.measureText(text);
      cache[key] = [dims.width, font[1] * 1.2]
      return cache[key]
    }
  }()
  );

function measureText(text, font, _node, width, widthMode, height, heightMode) {
  var font$1 = font !== undefined ? font : defaultFont;
  return measureWithCanvas(text, font$1);
}

function setTextContent(el, text, font) {
  var font$1 = font !== undefined ? font : defaultFont;
  el.textContent = text;
  var style = el.style;
  style.fontFamily = font$1[/* fontName */0];
  style.fontSize = string_of_float(font$1[/* fontSize */1]) + "px";
  return /* () */0;
}

function createTextNode(text, layout, font) {
  var el = createElement("span", { }, layout);
  setTextContent(el, text, font);
  return el;
}

function updateNativeProps(node, _oldProps, newProps) {
  return setDomProps(node, newProps);
}

function maybeUpdate(mounted, mountPoint, newElement) {
  if (mounted[/* tag */0] === newElement[/* tag */0]) {
    setDomProps(mountPoint, newElement[/* props */1]);
    return true;
  } else {
    return false;
  }
}

function inflate(param, layout) {
  return createElement(param[/* tag */0], param[/* props */1], layout);
}

var NativeInterface = /* module */[
  /* setDomProps */setDomProps,
  /* string_of_float */string_of_float,
  /* createElement */createElement,
  /* defaultFont */defaultFont,
  /* measureWithCanvas */measureWithCanvas,
  /* measureText */measureText,
  /* setTextContent */setTextContent,
  /* createTextNode */createTextNode,
  /* updateNativeProps */updateNativeProps,
  /* maybeUpdate */maybeUpdate,
  /* inflate */inflate
];

var include = FluidMaker.F([
      maybeUpdate,
      inflate,
      measureText,
      createTextNode,
      setTextContent,
      (function (prim, prim$1) {
          prim.appendChild(prim$1);
          return /* () */0;
        }),
      (function (prim, prim$1) {
          prim.removeChild(prim$1);
          return /* () */0;
        }),
      (function (prim, prim$1) {
          prim.replaceWith(prim$1);
          return /* () */0;
        })
    ]);

function div(id, $staropt$star, layout, _type, width, height, onclick, style, param) {
  var children = $staropt$star !== undefined ? $staropt$star : /* [] */0;
  var tmp = { };
  if (id !== undefined) {
    tmp.id = Js_primitive.valFromOption(id);
  }
  if (_type !== undefined) {
    tmp.type = Js_primitive.valFromOption(_type);
  }
  if (width !== undefined) {
    tmp.width = Js_primitive.valFromOption(width);
  }
  if (height !== undefined) {
    tmp.height = Js_primitive.valFromOption(height);
  }
  if (onclick !== undefined) {
    tmp.onclick = Js_primitive.valFromOption(onclick);
  }
  if (style !== undefined) {
    tmp.style = Js_primitive.valFromOption(style);
  }
  return /* `Builtin */[
          1024993923,
          /* tuple */[
            /* record */[
              /* tag */"div",
              /* props */tmp
            ],
            children,
            layout,
            undefined
          ]
        ];
}

function button(id, children, layout, _type, width, height, onclick, style, param) {
  var tmp = { };
  if (id !== undefined) {
    tmp.id = Js_primitive.valFromOption(id);
  }
  if (_type !== undefined) {
    tmp.type = Js_primitive.valFromOption(_type);
  }
  if (width !== undefined) {
    tmp.width = Js_primitive.valFromOption(width);
  }
  if (height !== undefined) {
    tmp.height = Js_primitive.valFromOption(height);
  }
  if (onclick !== undefined) {
    tmp.onclick = Js_primitive.valFromOption(onclick);
  }
  if (style !== undefined) {
    tmp.style = Js_primitive.valFromOption(style);
  }
  return /* `Builtin */[
          1024993923,
          /* tuple */[
            /* record */[
              /* tag */"button",
              /* props */tmp
            ],
            children,
            layout,
            undefined
          ]
        ];
}

function input(id, _type, width, height, onchange, oninput, style, param) {
  var tmp = { };
  if (id !== undefined) {
    tmp.id = Js_primitive.valFromOption(id);
  }
  if (_type !== undefined) {
    tmp.type = Js_primitive.valFromOption(_type);
  }
  if (onchange !== undefined) {
    tmp.onchange = Js_primitive.valFromOption(onchange);
  }
  if (oninput !== undefined) {
    tmp.oninput = Js_primitive.valFromOption(oninput);
  }
  if (width !== undefined) {
    tmp.width = Js_primitive.valFromOption(width);
  }
  if (height !== undefined) {
    tmp.height = Js_primitive.valFromOption(height);
  }
  if (style !== undefined) {
    tmp.style = Js_primitive.valFromOption(style);
  }
  return /* `Builtin */[
          1024993923,
          /* tuple */[
            /* record */[
              /* tag */"input",
              /* props */tmp
            ],
            /* [] */0,
            undefined,
            undefined
          ]
        ];
}

var Native = /* module */[
  /* div */div,
  /* button */button,
  /* input */input
];

var Fluid_001 = /* string */include[0];

var Fluid_002 = /* Maker */include[1];

var Fluid_003 = /* runRender */include[2];

var Fluid_004 = /* getNativeNode */include[3];

var Fluid_005 = /* getInstanceLayout */include[4];

var Fluid_006 = /* getMountedLayout */include[5];

var Fluid_007 = /* instantiateTree */include[6];

var Fluid_008 = /* runEffect */include[7];

var Fluid_009 = /* inflateTree */include[8];

var Fluid_010 = /* listenForChanges */include[9];

var Fluid_011 = /* reconcileTrees */include[10];

var Fluid_012 = /* reconcileChildren */include[11];

var Fluid_013 = /* mount */include[12];

var Fluid_014 = /* Hooks */include[13];

var Fluid = /* module */[
  /* NativeInterface */0,
  Fluid_001,
  Fluid_002,
  Fluid_003,
  Fluid_004,
  Fluid_005,
  Fluid_006,
  Fluid_007,
  Fluid_008,
  Fluid_009,
  Fluid_010,
  Fluid_011,
  Fluid_012,
  Fluid_013,
  Fluid_014,
  /* Native */Native
];

exports.NativeInterface = NativeInterface;
exports.Fluid = Fluid;
/* measureWithCanvas Not a pure module */
