// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Js_primitive from "bs-platform/lib/es6/js_primitive.js";

function unwrap() {
  return /* () */0;
}

function useState(initial, hooks) {
  var match = hooks[/* current */1];
  var match$1;
  if (match !== undefined) {
    var match$2 = match;
    var state = match$2[1];
    match$1 = /* tuple */[
      state,
      /* record */[
        /* invalidate */hooks[/* invalidate */0],
        /* current */Js_primitive.some(match$2[0]),
        /* prev : tuple */[
          state,
          hooks[/* prev */2]
        ]
      ]
    ];
  } else {
    var st = /* record */[/* contents */initial];
    match$1 = /* tuple */[
      st,
      /* record */[
        /* invalidate */hooks[/* invalidate */0],
        /* current */undefined,
        /* prev : tuple */[
          st,
          hooks[/* prev */2]
        ]
      ]
    ];
  }
  var state$1 = match$1[0];
  return /* tuple */[
          /* tuple */[
            state$1[/* contents */0],
            (function (v) {
                state$1[/* contents */0] = v;
                return Curry._1(hooks[/* invalidate */0], /* () */0);
              })
          ],
          match$1[1]
        ];
}

function newEffect(fn, args) {
  return /* record */[
          /* args */args,
          /* prevArgs */undefined,
          /* cleanup */undefined,
          /* fn */fn
        ];
}

function useEffect(fn, args, hooks) {
  var match = hooks[/* current */1];
  if (match !== undefined) {
    var match$1 = match;
    var effect = match$1[1];
    return /* record */[
            /* invalidate */hooks[/* invalidate */0],
            /* current */Js_primitive.some(match$1[0]),
            /* prev : tuple */[
              /* record */[
                /* args */args,
                /* prevArgs */Js_primitive.some(effect[/* args */0]),
                /* cleanup */effect[/* cleanup */2],
                /* fn */fn
              ],
              hooks[/* prev */2]
            ]
          ];
  } else {
    return /* record */[
            /* invalidate */hooks[/* invalidate */0],
            /* current */undefined,
            /* prev : tuple */[
              newEffect(fn, args),
              hooks[/* prev */2]
            ]
          ];
  }
}

function myComponent(_, _$1, param) {
  var match = useState(10, param[/* hooks */0]);
  var match$1 = useState("name", match[1]);
  return Curry._1(param[/* finish */1], useEffect((function (_, _$1) {
                    return /* () */0;
                  }), /* () */0, match$1[1]));
}

export {
  unwrap ,
  useState ,
  newEffect ,
  useEffect ,
  myComponent ,
  
}
/* No side effect */
